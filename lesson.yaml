- Class: meta
  Course: stream_hydrology
  Lesson: hydrographs
  Author: David Manning
  Type: Standard
  Organization: University of Nebraska at Omaha
  Version: 2.4.5


- Class: text
  Output: Welcome to the stream hydrology lab! We will use publicly available data collected by USGS to explore patterns of hydrology in Nebraska streams. We will use an R package called ‘dataRetrieval’ to access the data and input into R for graphical analysis. By the end of the lesson you should be able to i) Access data from USGS using the dataRetrieval pacakge. ii) Explore trends in discharge from any site where these data are available (e.g., the Big Papillion) using graphs.

- Class: text
  Output: First, let's load the package 'dataRetrieval'

- Class: cmd_question
  Output: Install the package with the following command install.packages('dataRetrieval')
  CorrectAnswer: install.packages("dataRetrieval")
  AnswerTests: expr_uses_func('install.packages')
  Hint: install.packages("dataRetrieval")

- Class: cmd_question
  Output: load the package with the command library(dataRetrieval).
  CorrectAnswer: library(dataRetrieval)
  AnswerTests: omnitest(correctExpr='library(dataRetrieval)')
  Hint: type library(dataRetrieval)

- Class: text
  Output: Congratulations, we now have access to any and all of the water data collected by USGS! The data are housed in the National Water Information System or NWIS - this package allows us to retrieve data that’s stored remotely on NWIS. Let’s take a look at its capabilities, starting with the information that’s provided for any given USGS site using the function siteINFO().

- Class: text
  Output: Let's look at two sites here in Nebraska - the Niobrara River at Sparks, NE, and the Elkhorn River at Waterloo, NE. We'll need to specify these as the sites we want in a list. The site numbers are "06800500" and "06461500". Save these as a vector with the command "c()"

- Class: cmd_question
  Output: Type siteNumbers <- c("06800500","06461500")
  CorrectAnswer: siteNumbers <- c("06800500","06461500")
  AnswerTests: omnitest(correctExpr='siteNumbers <- c("06800500","06461500")')
  Hint: Did you miss a quotation mark, or parenthesis?

- Class: cmd_question
  Output: Next, save the site information as siteINFO uisng the command readNWISsite(siteNumbers) for the Niobrara and Elkhorn sites.
  CorrectAnswer: siteINFO <- readNWISsite(siteNumbers)
  AnswerTests: omnitest(correctExpr='siteINFO <- readNWISsite(siteNumbers)')
  Hint: Name the vector 'siteINFO', using <-. Check capitalization.

- Class: cmd_question
  Output: Check to make sure we retrieved the site information with the command print(siteINFO).
  CorrectAnswer: print(siteINFO)
  AnswerTests: omnitest(correctExpr='print(siteINFO)')
  Hint: Check capitalization.

- Class: cmd_question
  Output: Now we'll look at what data are available at these sites using the function whatNWISdata. Save this information as 'dailyDataAvailable' by typing dailyDataAvailable <- whatNWISdata(siteNumbers=siteNumbers,service="dv",statCd="00003"). The service="dv" part of this command stands for "daily value" and the statCd part will check to see whether the maximum value is available.
  CorrectAnswer: dailyDataAvailable <- whatNWISdata(siteNumbers=siteNumbers,
                    service="dv",statCd="00003")
  AnswerTests: omnitest(correctExpr='dailyDataAvailable <- whatNWISdata(siteNumbers=siteNumbers,
                    service="dv",statCd="00003")')
  Hint: dailyDataAvailable <- whatNWISdata(siteNumbers=siteNumbers,
                    service="dv",statCd="00003")

- Class: cmd_question
  Output: Check the information using print(). Print just the first 5 rows of the available data using head().
  CorrectAnswer: print(head(dailyDataAvailable))
  AnswerTests: omnitest(correctExpr='print(head(dailyDataAvailable))')
  Hint: You can combine commands. print(head(dailyDataAvailable)

- Class: text
  Output: Exercise 1 - Plotting discharge through time. 

- Class: text
  Output: OK, now let's (finally) access and view some data. We’ll start with daily means of dishcharge from the Elkhorn using the function readNWISdv(). Save each of the following using a line of code. siteNumber, parameterCd, startDate, endDate. These should be specified as "06800500" (Elkhorn site), "00060" (discharge), "2018-11-01" (starting date) and "2019-11-01" (ending date), respectively.

- Class: cmd_question
  Output: Start with saving the siteNumber we want.
  CorrectAnswer: siteNumbers <- "06800500"
  AnswerTests: omnitest(correctExpr='siteNumbers <- "06800500"')
  Hint: siteNumbers <- "06800500"

- Class: cmd_question
  Output: Now save the parameterCd
  CorrectAnswer: parameterCd <- "00060"
  AnswerTests: omnitest(correctExpr='parameterCd <- "00060"')
  Hint: parameterCd <- "00060"

- Class: cmd_question
  Output: Next the startDate
  CorrectAnswer: startDate <- "2018-11-01"
  AnswerTests: omnitest(correctExpr='startDate <- "2018-11-01"')
  Hint: startDate <- "2018-11-01"

- Class: cmd_question
  Output: And, finally the endDate
  CorrectAnswer: endDate <- "2019-11-01"
  AnswerTests: omnitest(correctExpr='endDate <- "2019-11-01"')
  Hint: endDate <- "2019-11-01"

- Class: cmd_question
  Output: With the parameters for the command saved in R, we can retrieve the data with the command readNWISdv(). Save the output as discharge_elk.
  CorrectAnswer: discharge_elk <- readNWISdv(siteNumbers, 
                    parameterCd, startDate, endDate)
  AnswerTests: omnitest(correctExpr='discharge_elk <- readNWISdv(siteNumbers, 
                    parameterCd, startDate, endDate)')
  Hint: discharge_elk <- readNWISdv(siteNumbers, parameterCd, startDate, endDate)


- Class: cmd_question
  Output: print the first 5 rows to check.
  CorrectAnswer: print(head(discharge_elk))
  AnswerTests: omnitest(correctExpr='print(head(discharge_elk))')
  Hint: print(head(discharge_elk))


- Class: cmd_question
  Output: Notice that the column names of the data.frame aren’t super helpful. We can change them to something a bit more useful using renameNWISColumns() command. Write over the discharge_elk data.frame with this command.
  CorrectAnswer: discharge_elk <- renameNWISColumns(discharge_elk)
  AnswerTests: omnitest(correctExpr='discharge_elk <- renameNWISColumns(discharge_elk)')
  Hint: discharge_elk <- renameNWISColumns(discharge_elk)

- Class: cmd_question
  Output: Check the first few rows with head().
  CorrectAnswer: head(discharge_elk)
  AnswerTests: omnitest(correctExpr='head(discharge_elk)')
  Hint: head(discharge_elk)

- Class: text
  Output: Make a hydrograph using the ggplot2 package.

- Class: cmd_question
  Output: Install it using the command install.packages().
  CorrectAnswer: install.packages('ggplot2')
  AnswerTests: expr_uses_func('install.packages')
  Hint: install.packages('ggplot2')

- Class: cmd_question
  Output: Load ggplot2 using library().
  CorrectAnswer: library(ggplot2)
  AnswerTests: omnitest(correctExpr='library(ggplot2)')
  Hint: library(ggplot2)

- Class: cmd_question
  Output: The commands in ggplot are fairly intuitive, but take some practice. Type ?ggplot() to see the help file for this command.
  CorrectAnswer: ?ggplot()
  AnswerTests: omnitest(correctExpr='?ggplot()')
  Hint: ?ggplot()

- Class: text
  Output: The key items to notice from the help file are the 'data' (data.frame you're working with) and 'mapping' of aesthetics (aes()) components of the command. These two items can be specified when creating a new plot, like this - ggplot(data=discharge_elk,aes(x=Date,y=Flow)). Then, elements can be layered on top of the initial plot using special commands like 'geom_point()'. Add these with a plus symbol directly after the initial ggplot() command. Another nice feature is you can save a plot, in the same way as a vector, data.frame etc. 

- Class: cmd_question
  Output: Check the column names for the discharge_elk data.frame with the command names() to remind yourself what they are before writing your ggplot() command.
  CorrectAnswer: names(discharge_elk)
  AnswerTests: omnitest(correctExpr='names(discharge_elk)')
  Hint: names(discharge_elk)

- Class: cmd_question
  Output: Make a hydrograph for the Elkhorn River using ggplot(), save it as elk_q.
  CorrectAnswer: elk_q <- ggplot(data=discharge_elk,aes(x=Date,y=Flow)) + geom_point()
  AnswerTests: expr_creates_var("elk_q"); omnitest(correctExpr='elk_q <- ggplot(data=discharge_elk,aes(x=Date,y=Flow)) + geom_point()')
  Hint: elk_q <- ggplot(data=discharge_elk,aes(x=Date,y=Flow))

- Class: cmd_question
  Output: View the graph by typing in elk_q
  CorrectAnswer: elk_q
  AnswerTests: omnitest(correctExpr='elk_q')
  Hint: elk_q

- Class: cmd_question
  Output: Let's explore the data a little more. Use the command summary() to find the range, median, mean, and interquartile range of flow for the Elkhorn 2018-2019.
  CorrectAnswer: summary(discharge_elk)
  AnswerTests: omnitest(correctExpr='summary(discharge_elk)')
  Hint: summary(discharge_elk)

- Class: cmd_question
  Output: We might be interested in when different events (min flow, max flow) occurred. We can find out which rows in the data.frame contain the min/max using the command which(). To do so, it would look something like this. when_max <- which(discharge_elk$Flow==max(discharge_elk$Flow). Note, the $ specifies the column name we want.
  CorrectAnswer: when_max <- which(discharge_elk$Flow==max(discharge_elk$Flow)
  AnswerTests: expr_creates_var("when_max"); omnitest( correctExpr='when_max <- which(discharge_elk$Flow==max(discharge_elk$Flow))')
  Hint: when_max <- which(discharge_elk$Flow==max(discharge_elk$Flow)

- Class: cmd_question
  Output: Type discharge_elk[when_max,] to see only the row when the max discharge occurred in the data.frame.
  CorrectAnswer: discharge_elk[when_max,]
  AnswerTests: omnitest(correctExpr='discharge_elk[when_max,]')
  Hint: discharge_elk[when_max,]

- Class: cmd_question
  Output: How would you find out when the minimum flow value occurred?
  CorrectAnswer: when_min <- which(discharge_elk$Flow==min(discharge_elk$Flow)
  AnswerTests: expr_creates_var("when_min"); omnitest(correctExpr='when_min <- which(discharge_elk$Flow==min(discharge_elk$Flow))')
  Hint: when_min <- which(discharge_elk$Flow==min(discharge_elk$Flow)



- Class: text
  Output: That's the end of the hydrograph lesson. To complete the lesson, save the hydrograph plot as a .pdf, and write a descriptive caption for the figure. Below the Figure and caption, describe 3 things about the hydrograph that you found notable or interesting. Put the figure, caption and your description/observations in a word doc and submit to canvas.









